import time
from machine import Pin, SPI
import neopixel
from GolanDisplay import GolanDisplay  # Import the GolanDisplay class

# NeoPixel setup
NEO_PIN = 22  # Using GPIO22 for NeoPixel control (unchanged)
NUM_LEDS = 4  # Adjust number of LEDs in your strip
np = neopixel.NeoPixel(Pin(NEO_PIN, Pin.OUT), NUM_LEDS)

# Define vibrant colors for the effect
HOT_PINK = (255, 20, 147)
AQUA = (0, 255, 255)
LIME = (0, 255, 0)
VIOLET = (238, 130, 238)
ORANGE = (255, 165, 0)

# List of new vibrant colors to use
colors = [HOT_PINK, AQUA, LIME, VIOLET, ORANGE]

# LED control class
class LEDControl:
    def __init__(self, pin, num_leds):
        self.pin = Pin(pin, Pin.OUT)
        self.num_leds = num_leds
        self.np = neopixel.NeoPixel(self.pin, self.num_leds)
        self.current_led = 0  # To track the current LED for color movement

    def set_all_leds(self, color):
        for i in range(self.num_leds):
            self.np[i] = color
        self.np.write()

    def moving_colors(self):
        for i in range(self.num_leds):
            color_idx = (self.current_led + i) % len(colors)
            self.np[i] = colors[color_idx]
        self.np.write()
        self.current_led = (self.current_led + 1) % self.num_leds
        time.sleep(0.2)

class SimpleMotor:
    def __init__(self, in1_pin, in2_pin, led_pin):
        self.in1 = Pin(in1_pin, Pin.OUT)
        self.in2 = Pin(in2_pin, Pin.OUT)
        self.led = Pin(led_pin, Pin.OUT)

    def motgo(self, speed):
        if speed > 0:
            self.in1.value(1)
            self.in2.value(0)
        elif speed < 0:
            self.in1.value(0)
            self.in2.value(1)
        else:
            self.in1.value(0)
            self.in2.value(0)

    def move_for_time(self, speed, duration):
        self.led.value(1)
        try:
            if speed > 0:
                print("Motor moved right")
            elif speed < 0:
                print("Motor moved left")
            time.sleep(duration)
            self.motgo(speed)
            time.sleep(duration)
        finally:
            self.motgo(0)
            self.led.value(0)

# Initialize the SPI interface and display pins
spi = SPI(1, baudrate=33000000, sck=Pin(18), mosi=Pin(23), miso=Pin(19))
cs = Pin(5)
dc = Pin(25)
rst = Pin(33)

# Create an instance of GolanDisplay
golan_display = GolanDisplay(spi, cs, dc, rst)

# Show the starting "GOLAN" screen with black background for 2 seconds
golan_display.display_start_screen()

# Run the animation at regular intervals
last_animation_time = time.time()

# Motor control pins
in1_pin = 4  # GPIO4 for IN1 (new pin)
in2_pin = 13  # GPIO13 for IN2 (new pin)
led_pin = 2   # GPIO2 for the built-in LED (unchanged)

# Button pins
button_pin = 12  # GPIO12 for button input (Move button)
quit_button_pin = 14  # GPIO14 for quit button input

# Initialize buttons with pull-down resistors
button = Pin(button_pin, Pin.IN, Pin.PULL_DOWN)  # Move button
quit_button = Pin(quit_button_pin, Pin.IN, Pin.PULL_DOWN)  # Quit button

# Create instances of the motor and LED control
motor = SimpleMotor(in1_pin, in2_pin, led_pin)
led_control = LEDControl(NEO_PIN, NUM_LEDS)

move_right = True
print("Press the green button to move the motor. Press the red quit button to stop the program.")

while True:
    # Run the moving color effect in the background
    led_control.moving_colors()

    # Check if it's time to refresh the display
    if time.time() - last_animation_time > 2:
        golan_display.run_animation()  # Run the display animation at intervals
        last_animation_time = time.time()

    if quit_button.value() == 1:
        print("Quit button pressed. Exiting program.")
        break
    
    if button.value() == 1:
        if move_right:
            motor.move_for_time(1, 0.111)  # Move to the right
        else:
            motor.move_for_time(-1, 0.111)  # Move to the left
        move_right = not move_right  # Toggle direction
        time.sleep(0.3)  # Debounce delay to avoid repeated triggers

print("Program stopped.")
